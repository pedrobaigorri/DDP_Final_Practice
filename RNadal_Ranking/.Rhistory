OOS_errors_tree <- sum(ifelse (fitTree$pred["pred"] != fitTree$pred["obs"], 1, 0))
OOS_errors_tree
nrow(trainB)
head(fitTree$pred)
print(fitTree)
head(fitTree$finalModel)
pr <- predict(fitTree)
OOS_errors_tree <- sum(p != trainB$classe)
OOS_errors_tree <- sum(pr != trainB$classe)
OOS_errors_tree
OOS_errors_tree_rate <- OOS_errors_tree / nrow(trainB)
OOS_errors_tree_rate
print(fitTree)
pr <- predict(fitGbm)
OOS_errors_gbm <- sum(pr != trainB$classe)
OOS_errors_gbm_rate <- OOS_errors_gbm / nrow(trainB)
pr <- predict(fitGbm)
OOS_errors_gbm <- sum(pr != trainB$classe)
OOS_errors_gbm_rate <- OOS_errors_gbm / nrow(trainB)
OOS_errors_gbm_rate
print(fitGbm)
0.9635103 + 0.02813169
head(fitGbm$pred)
nrow(fitGbm$pred)
table(fitGbm$pred["Resample"])
head(fitGbm$resample)
mean(fitGbm$resample)
mean(fitGbm$resample)["Accuracy"]
mean(fitGbm$resample["Accuracy"])
mean(fitGbm$resample["Accuracy"])
tapply()
fitGbm$resample
fitGbm$resample[1]
fitGbm$resample["Accuracy"]
mean(fitGbm$resample["Accuracy"])
mean(as.numeric(fitGbm$resample["Accuracy"])
)
mean(as.numeric(fitGbm$resample["Accuracy"])
)
mean(as.numeric(fitGbm$resample["Accuracy"]))
class(fitGbm$resample["Accuracy"])
sum(fitGbm$resample["Accuracy"])
mean(fitGbm$resample["Accuracy"])
sum(fitGbm$resample["Accuracy"])/10
print(fitGbm)
sum(fitGbm$resample["Accuracy"])/10
aggregate(x = fitGbm$pred,
by = fitGbm$pred["Resample"],
FUN = function(fitGbm$pred){y <- sum(fitGbm$pred["pred"] != fitGbm$pred["obs"])/nrow(fitGbm$pred); return(y)}
folds <- levels(fitGbm$resample)
folds
levels(fitGbm$resample)
fitGbm$resample
folds <- levels(fitGbm$resample["Resample"])
fitGbm$resample["Resample"]
levels(fitGbm$resample["Resample"])
folds <- (fitGbm$resample["Resample"])
for (i in folds){
print i
}
for (i in folds){
print (i)
}
for (i in folds){
errors[i] <- i
}
errors <- list(10)
for (i in folds){
errors[i] <- i
}
errors
errors <- list()
for (i in folds){
errors[i] <- i
}
for (i in folds){
fold_i <- fitGbm$pred[, "Resample" == i]
errors[i] <- sum(fold_i$pred != fold_i$obs
}
for (i in folds){
fold_i <- fitGbm$pred[fitGbm$pred[, "Resample"] == i, ]
errors[i] <- sum(fold_i$pred != fold_i$obs
}
for (i in folds){
fold_i <- fitGbm$pred[fitGbm$pred[, "Resample"] = i, ]
errors[i] <- sum(fold_i$pred != fold_i$obs
}
fold_i <- fitGbm$pred[fitGbm$pred[, "Resample"] = "Fold01", ]
pred <- fitGbm$pred
fold_i <- pred[pred[, "Resample"] == "Fold01", ]
for (i in folds){
fold_i <- pred[pred[, "Resample"] == i, ]
errors[i] <- sum(fold_i$pred != fold_i$obs)/nrow(fold_i)
}
errors
mean(errors)
sum(errors)/10
sum(errors[1])/10
sapply(errors, sum)
sumÃ‡(sapply(errors, sum))
sum(sapply(errors, sum))
sum(fitGbm$resample["Accuracy"])/10
for (i in folds){
fold_i <- pred[pred[, "Resample"] == i, ]
fold_i
errors[i] <- sum(fold_i$pred != fold_i$obs)/nrow(fold_i)
}
for (i in folds){
i
fold_i <- pred[pred[, "Resample"] == i, ]
fold_i
errors[i] <- sum(fold_i$pred != fold_i$obs)/nrow(fold_i)
}
folds <- (fitGbm$resample["Resample"])
tapply(pred$pred != pred$obs, pred$Resample, sum)
(fitGbm$resample["Resample"])
fitGbm$resample
c <- tapply(pred$pred, pred$Resample, count)
c <- tapply(pred$pred, pred$Resample, nrow)
c
c <- table(pred$Resample)
c
rate <- t/c
rate <- c/t
t
t <- tapply(pred$pred != pred$obs, pred$Resample, sum)
t
c <- table(pred$Resample)
rate <- c/t
rate <- mean(c/t)
c/t
rate <- mean(c/t)
rate
rate <- mean(t/c)
rate
t/c
sum(fitGbm$resample["Accuracy"])/10
pred <- fitTree$pred
t <- tapply(pred$pred != pred$obs, pred$Resample, sum)
c <- table(pred$Resample)
rate <- mean(t/c)
rate
pr <- predict(fitGbm)
OOS_errors_gbm <- sum(pr != trainB$classe)
OOS_errors_gbm_rate <- OOS_errors_gbm / nrow(trainB)
OOS_errors_gbm_rate
pred <- fitGbm$pred
t <- tapply(pred$pred != pred$obs, pred$Resample, sum)
c <- table(pred$Resample)
rate <- mean(t/c)
rate
c <- table(pred$Resample)
table(pred$Resample)
tapply(pred$pred != pred$obs, pred$Resample, sum)
2050/17658
head(pred)
pred$pred != pred$obs
head(pred[pred$pred != pred$obs,])
(pred[pred$pred != pred$obs,])
table(pred$Resample, pred$n.trees)
nrow(trainB)
# errors
pred <- fitGbm$pred[pred$n.trees == 150, ]
t <- tapply(pred$pred != pred$obs, pred$Resample, sum)
c <- table(pred$Resample)
rate <- mean(t/c)
rate
t/c
table(pred$Resample)
print(fitGbm)
rate
tt <- table(pred[pred$pred != pred$obs, ], pred$Resample)
tt <- table(pred[pred$pred != pred$obs, "Resample"])
tt
t
t <- tapply(pred$pred != pred$obs, pred$Resample, sum)
t
save.image("~/predict.RData")
pred <- fitGbm$pred[pred$n.trees == 150, ]
OOS_errors_gbm <- tapply(pred$pred != pred$obs, pred$Resample, sum)
n <- table(pred$Resample)
OOS_errors_rate_gbm <- mean(OOS_errors_gbm/n)
OOS_errors_rate_gbm
# errors
pred <- fitGbm$pred[pred$n.trees == 150, ]
OOS_errors_gbm <- tapply(pred$pred != pred$obs, pred$Resample, sum)
n <- table(pred$Resample)
OOS_errors_rate_gbm <- mean(OOS_errors_gbm/n)
OOS_errors_rate_gbm
pred <- predict(fitGbm)
IOS_errors_gbm <- sum(pred != trainB$classe)
IOS_errors_gbm_rate <- IOS_errors_gbm / nrow(trainB)
IOS_errors_gbm_rate
fitC5 <- train(classe ~ .,  data = trainB, method="C5.0",  trControl=train_control)
print(fitC5)
plot(fitC5)
save.image("~/predict.RData")
prediction2 <- predict(fitC5, newdata = testB)
print(prediction)
#prediction test
prediction <- predict(fitGbm, newdata = testB)
print(prediction)
print(prediction2)
# in of sample errors
pred <- predict(fitC5)
IOS_errors_c5 <- sum(pred != trainB$classe)
IOS_errors_c5_rate <- IOS_errors_c5 / nrow(trainB)
IOS_errors_c5_rate
IOS_errors_c5
head(pred)
head(trainB$classe)
head(trainB$classe, 20)
trainB$classe
# removing variables of near zero variance at test
trainB <- train[, -nearZeroVar(test)]
testB <- test[, -nearZeroVar(test)]
trainB$classe
table(trainB$classe)
table(pred)
# in of sample errors
pred <- predict(fitGbm)
table(pred)
print(fitC5)
head(fitC5$pred)
head(fitGbm$pred)
print(fitGbm)
head(fitGbm$pred)
# out of sample errors
pred <- fitGbm$pred[pred$n.trees == 150, ]
# out of sample errors
pred <- fitGbm$pred[pred$n.trees == 150, ]
fitGbm$pred[pred$n.trees == 150, ]
# out of sample errors
pred <- fitGbm$pred[pred$n.trees == 150, ]
# out of sample errors
pred <- fitGbm$pred[pred$n.trees = 150, ]
# out of sample errors
pred <- fitGbm$pred[pred$n.trees == 150, ]
pred <- subset(fitGbm, n.trees == 150)
pred <- subset(fitGbm, fitGbm$n.trees == 150)
pred <- subset(fitGbm$pred, fitGbm$pred$n.trees == 150)
head(pred)
table(pred$interaction.depth)
nrow(trainB)
print(fitGbm)
pred <- subset(fitGbm$pred, fitGbm$pred$n.trees == 150 & interaction.depth == 3)
table(pred$shrinkage)
# out of sample errors
pred <- subset(fitGbm$pred, fitGbm$pred$n.trees == 150 & interaction.depth == 3)
OOS_errors_gbm <- tapply(pred$pred != pred$obs, pred$Resample, sum)
n <- table(pred$Resample)
OOS_errors_rate_gbm <- mean(OOS_errors_gbm/n)
OOS_errors_rate_gbm
pred <- predict(fitGbm)
IOS_errors_gbm <- sum(pred != trainB$classe)
IOS_errors_gbm_rate <- IOS_errors_gbm / nrow(trainB)
IOS_errors_gbm_rate
# out of sample errors
pred <- subset(fitGbm$pred, n.trees == 150 & interaction.depth == 3)
OOS_errors_gbm <- tapply(pred$pred != pred$obs, pred$Resample, sum)
n <- table(pred$Resample)
OOS_errors_rate_gbm <- mean(OOS_errors_gbm/n)
OOS_errors_rate_gbm
print(OOS_errors_rate_gbm)
print(round(OOS_errors_rate_gbm*100, 2)
print(round(OOS_errors_rate_gbm*100, 2))
print(round(OOS_errors_rate_gbm*100, 2))
print(round(OOS_errors_rate_gbm, 2))
print(round(OOS_errors_rate_gbm, 3))
print(c5)
print(fitc5)
print(fitC5)
# out of sample errors
pred <- subset(fitC5$pred, trials == 20 & model == "rules" & winnow = FALSE )
# out of sample errors
pred <- subset(fitC5$pred, trials == 20 & model == "rules" & winnow == FALSE )
OOS_errors_c5 <- tapply(pred$pred != pred$obs, pred$Resample, sum)
n <- table(pred$Resample)
OOS_errors_rate_c5 <- mean(OOS_errors_c5/n)
print(round(OOS_errors_rate_c5, 3))
print(round(OOS_errors_rate_c5, 4))
print(round(OOS_errors_rate_gbm, 4))
print(round(OOS_errors_rate_c5, 3))
print(round(OOS_errors_rate_gbm, 3))
OOS_errors_gbm
n <- table(pred$Resample)
n
71/1961
OOS_errors_c5
n
load("~/predict.RData")
head(train)
colnames(head)
colnames(train)
trees
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
mtcars
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(mtcars, "mpg", "hp",
options=list(width=600, height=400))
M <- gvisMotionChart(mtcars, "mpg", "wt",
options=list(width=600, height=400))
print(M,"chart")
plot(M,"chart")
plot(M,"chart")
plot(M)
M <- gvisLineChart(mtcars, "mpg", "wt",
options=list(width=600, height=400))
plot(M)
M <- gvisColumnChart(mtcars, "mpg", "wt",
options=list(width=600, height=400))
plot(M)
M <- gvisColumnChart(mtcars, "mpg", "wt")
plot(M)
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
Exports
plot(G)
plot(M)
Fruits
M <- gvisMotionChart(Fruits, "Fruit", "Year")
plot(M)
install.packages("plotly")
#################
libray(plotly)
#################
library(plotly)
plot_ly(mtcars, x=wt, y=mpg, mode="markers", color=as.factor(cyl))
plot_ly(mtcars, x = wt, y=mpg, mode="markers", color=as.factor(cyl))
mtcars
plot_ly(mtcars, x = mtcars$wt, y=mpg, mode="markers", color=as.factor(cyl))
plot_ly(mtcars, x = mtcars$wt, y=mpg, mode="markers", color=as.factor(mtcars$cyl))
plot_ly(mtcars, x = mtcars$wt, y=mtcars$mpg, mode="markers", color=as.factor(mtcars$cyl))
plot_ly( = mtcars$wt, y=mtcars$mpg, z=mtcars$cyl, mode="markers", type="scatter3d")
plot_ly(mtcars$wt, y=mtcars$mpg, z=mtcars$cyl, mode="markers", type="scatter3d")
plot_ly(x=mtcars$wt, y=mtcars$mpg, z=mtcars$cyl, mode="markers", type="scatter3d")
head(EuStockMarkets)
df <- as.data.frame(EuStockMarkets)
df
head(EuStockMarkets)
head(df)
is.data.frame(EuStockMarkets)
is.data.frame(df)
shiny::runApp('D:/GIT_REPOSITORY/DDP_Final_Practice/RNadal_Ranking')
runApp('D:/GIT_REPOSITORY/DDP_Final_Practice/RNadal_Ranking')
runApp('D:/GIT_REPOSITORY/DDP_Final_Practice/RNadal_Ranking')
file <- "./rnadal_statistics.csv"
rnadal_data <- read.table(file, header = TRUE, sep = ",")
file <- ".\rnadal_statistics.csv"
rnadal_data <- read.table(file, header = TRUE, sep = ",")
getSrcDirectory()
getwd()
setwd(9)
setwd()
setwd("D://GIT_REPOSITORY//DDP_Final_Practice//RNadal_Ranking")
file <- "./rnadal_statistics.csv"
rnadal_data <- read.table(file, header = TRUE, sep = ",")
setwd("D://GIT_REPOSITORY//DDP_Final_Practice//RNadal_Ranking")
file <- "./rnadal_statistics.csv"
rnadal_data <- read.table(file, header = TRUE, sep = ";")
runApp()
runApp()
runApp()
runApp()
runApp()
View(rnadal_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
require(rCharts)
install.packages("rCharts")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv/rCharts')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("yaml")
install.packages("yaml")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
## Format the data
haireye = as.data.frame(HairEyeColor)
## Generate the plot
n1 = nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
## Display the plot
n1
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
chart$print(include_assets=T)
source('~/.active-rstudio-document')
chart <- rPlot(won_grand_slams ~ year, type = 'bar', colour ='n1_eoy' , data = rnadal_data)
chart$facet(var = 'n1_eoy', type = 'wrap', rows = 1)
chart$print(include_assets=T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file <- "D://GIT_REPOSITORY//DDP_Final_Practice//RNadal_Ranking//data//rnadal_statistics.csv"
rnadal_data <- read.table(file, header = TRUE, sep = ";")
rnadal_data$year <- as.factor(rnadal_data$year)
rnadal_data$Ranking <- ifelse(rnadal_data$n1_eoy == 1, "Number 1", "Other position")
rnadal_data$rest_won_tournaments <- rnadal_data$total_won_tournaments - rnadal_data$won_grand_slams
rnadal_data$rest_finals <- rnadal_data$total_finals - rnadal_data$finals_grand_slams
fit <- train(as.factor(n1_eoy) ~ rest_won_tournaments + rest_finals + won_grand_slams + finals_grand_slams,
data = rnadal_data, method ="C5.0")
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(0, 0, 0, 0)
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(1, 0, 0, 0)
df <- data.frame(matrix(ncol = 4, nrow = 0))
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(1, 0, 0, 0)
#p <- predict(fit, newdata = df, type = "response", se.fit = TRUE)
p <- predict(fit, newdata = df)
x <- c("rest_won_tournaments", "rest_finals", "won_grand_slams", "finals_grand_slams")
colnames(df) <- x
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(1, 0, 0, 0)
#p <- predict(fit, newdata = df, type = "response", se.fit = TRUE)
p <- predict(fit, newdata = df)
p
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(0, 0, 2, 0)
#p <- predict(fit, newdata = df, type = "response", se.fit = TRUE)
p <- predict(fit, newdata = df)
p
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(0, 0, 1, 4)
#p <- predict(fit, newdata = df, type = "response", se.fit = TRUE)
p <- predict(fit, newdata = df)
p
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(20, 20, 1, 4)
#p <- predict(fit, newdata = df, type = "response", se.fit = TRUE)
p <- predict(fit, newdata = df)
p
#df[1,] <- c(input$otherw, input$otherf, input$gslamsw, input$gslamsf)
df[1,] <- c(200, 200, 1, 4)
#p <- predict(fit, newdata = df, type = "response", se.fit = TRUE)
p <- predict(fit, newdata = df)
p
runApp()
runApp()
runApp()
runApp()
runApp()
df[1,]
p
runApp()
p
pp
p
runApp()
runApp()
runApp()
runApp()
runApp()
summary(fit)
runApp()
